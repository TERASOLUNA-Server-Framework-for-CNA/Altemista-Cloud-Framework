<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"
	default-lazy-init="true">


	<!-- Scan all the beans of the batch module -->
	<context:component-scan base-package="org.altemista.cloudfwk.batch.spring" />

	
	<!--tag::internals1[]-->
	<!-- Runtime service registry interface for registering job configurations by name. -->
	<bean id="jobRegistry"
			class="org.springframework.batch.core.configuration.support.MapJobRegistry" />
	
	<!-- Registers Job beans in the JobRegistry -->
	<bean id="jobRegistryBeanPostProcessor"
			class="org.springframework.batch.core.configuration.support.JobRegistryBeanPostProcessor">
		<property name="jobRegistry" ref="jobRegistry"/>
	</bean>

	<!-- Loads and unloads Jobs when the application context is created and destroyed.
		Each resource provided is loaded as an application context
		with the current context as its parent,
		and then all the jobs from the child context
		are registered under their bean names. -->
	<bean class="org.springframework.batch.core.configuration.support.AutomaticJobRegistrar">
	
		<property name="applicationContextFactories">
			<bean class="org.springframework.batch.core.configuration.support.ClasspathXmlApplicationContextsFactoryBean">
				<property name="resources" value="classpath:jobs/**/*.xml" /> <!--1-->
			</bean>
		</property>
		
		<property name="jobLoader">
			<bean class="org.springframework.batch.core.configuration.support.DefaultJobLoader">
				<property name="jobRegistry" ref="jobRegistry" />
			</bean>
		</property>
	</bean>
	<!--end::internals1[]-->


	<!--tag::internals2[]-->
	<!-- Interface to perform common monitoring tasks
		such as stopping, restarting, or summarizing a Job. -->
	<bean id="jobOperator"
			class="org.springframework.batch.core.launch.support.SimpleJobOperator">
		<property name="jobExplorer" ref="jobExplorer" />
		<property name="jobRepository" ref="jobRepository" />
		<property name="jobRegistry" ref="jobRegistry" />
		<property name="jobLauncher" ref="jobLauncher" />
	</bean>
	
	<!-- The JobExplorer provides read-only operations on the meta-data -->
	<bean id="jobExplorer"
			class="org.springframework.batch.core.explore.support.JobExplorerFactoryBean">
		<property name="dataSource" ref="batchDataSource" /> <!--1-->
	</bean>
	
	<!-- The JobRepository provides CRUD operations on the meta-data -->
	<bean id="jobRepository"
			class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean">
		<property name="dataSource" ref="batchDataSource" /> <!--1-->
		<property name="transactionManager" ref="batchTransactionManager" />
	</bean>
	
	<!-- (transaction manager required by the JobRepository bean) -->
	<bean id="batchTransactionManager"
			class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="batchDataSource" /> <!--1-->
	</bean>
	
	<!-- Interface for controlling jobs (ad-hoc executions), using a simple asynchronous task executor -->
	<bean id="jobLauncher"
			class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
		<property name="taskExecutor" ref="jobTaskExecutor" />
	</bean>
	
	<!-- By default, uses a TaskExecutor implementation that fires each task asynchronously in a new thread -->
	<bean id="jobTaskExecutor"
			class="org.springframework.core.task.SimpleAsyncTaskExecutor" /> <!--2-->
	<!--end::internals2[]-->

</beans>