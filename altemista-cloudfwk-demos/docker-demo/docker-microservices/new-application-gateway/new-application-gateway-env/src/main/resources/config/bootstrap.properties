spring.application.name=gateway

# =======================================================================================
#   Locating Remote Configuration Resources
# =======================================================================================
# spring.profiles.active=local

# =======================================================================================
#   Locating Remote Configuration Resources
# =======================================================================================
# The Config Service serves property sources from /{name}/{profile}/{label}, where the default bindings in the client app are
#
#   - "name" = ${spring.application.name}
#   - "profile" = ${spring.profiles.active} (actually Environment.getActiveProfiles())
#   - "label" = "master"
#
# All of them can be overridden by setting spring.cloud.config.* (where * is "name", "profile" or "label"). 
# The "label" is useful for rolling back to previous versions of configuration; with the default Config Server
# implementation it can be a git label, branch name or commit id. Label can also be provided as a comma-separated 
# list, in which case the items in the list are tried on-by-one until one succeeds. This can be useful when working 
# on a feature branch, for instance, when you might want to align the config label with your branch, but make 
# it optional (e.g. spring.cloud.config.label=myfeature,develop).
# =======================================================================================
# spring.cloud.config.name=
# spring.cloud.config.profile=
# spring.cloud.config.label=

# =======================================================================================
#   Spring Cloud Config URI for direct configuration
# =======================================================================================
# spring.cloud.config.uri=http://localhost:8888
