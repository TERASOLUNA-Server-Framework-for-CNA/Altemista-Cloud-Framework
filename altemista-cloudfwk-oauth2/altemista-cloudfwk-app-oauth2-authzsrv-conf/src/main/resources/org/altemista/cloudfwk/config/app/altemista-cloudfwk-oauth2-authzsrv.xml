<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2.xsd">

	<!--tag::internals[]-->
	<!-- Configures the OAuth 2.0 Authorization Server -->
	<oauth2:authorization-server
			client-details-service-ref="oauth2ClientDetailsService"
			check-token-enabled="true"
			token-services-ref="oauth2AuthorizationServerTokenServices">
		
		<oauth2:authorization-code authorization-code-services-ref="oauth2AuthorizationCodeServices"/>
		<oauth2:implicit />
		<oauth2:refresh-token />
		<oauth2:client-credentials />
		<oauth2:password authentication-manager-ref="oauth2UsersAuthenticationManager"/>
	</oauth2:authorization-server>

	<!-- Authentication manager for the OAuth2 clients -->
	<security:authentication-manager id="oauth2ClientAuthenticationManager">
		<security:authentication-provider
				user-service-ref="oauth2ClientDetailServiceAsUserDetailsService" />
	</security:authentication-manager>
	
	<!-- (adapts the client details service as a user details service) -->
	<bean id="oauth2ClientDetailServiceAsUserDetailsService"
			class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService"
			primary="false">
		<constructor-arg ref="oauth2ClientDetailsService" />
	</bean>

	<!--
		The client details service is to be provided by the application.
		E.g.:
		<oauth2:client-details-service id="oauth2ClientDetailsService">
			<oauth2:client client-id="foo" secret="bar" scope="FOO" authorized-grant-types="password" />
			...
		</oauth2:client-details-service>
	 -->
	 
	<!--
		Authentication manager for the resource owner password credentials grant user
		(to be provided by the application).
		E.g.:
		<alias alias="oauth2UsersAuthenticationManager" name="appAuthenticationManager" />
	-->
	
	<!-- Default authorization code services that can be overriden by the application -->
	<bean id="oauth2AuthorizationCodeServices"
			class="org.springframework.security.oauth2.provider.code.InMemoryAuthorizationCodeServices"
			primary="false"
		/>

	<!-- Default token services for the authorization server
			that can be overriden by the application -->
	<bean id="oauth2AuthorizationServerTokenServices"
			class="org.springframework.security.oauth2.provider.token.DefaultTokenServices"
			primary="false">
		<property name="supportRefreshToken" value="true" />
		<property name="tokenStore">
			<bean class="org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore" />
		</property>
	</bean>

	<!-- Security settings for OAuth 2.0 endpoints related to access token operation
			(mimics AuthorizationServerSecurityConfiguration,
			actually imported by @EnableAuthorizationServer) -->
	<security:http pattern="/oauth/*token*/**"
			authentication-manager-ref="oauth2ClientAuthenticationManager">
		
		<security:http-basic />
		<security:csrf disabled="true" />
		<security:intercept-url pattern="/**" access="authenticated"
				requires-channel="${oauth2.authorizationServer.requiresChannel:https}"/>
	</security:http>
	<!--end::internals[]-->

</beans>